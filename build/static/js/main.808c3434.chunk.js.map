{"version":3,"sources":["components/InfoBox/InfoBox.jsx","util.js","components/Map/Map.jsx","components/Table/Table.jsx","components/LineGraph/LineGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","buildChartData","data","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","prettyPrintStat","stat","numeral","format","Map","countries","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","index","key","options","legend","display","elements","point","mantainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","LineGraph","useState","setData","useEffect","a","fetch","response","json","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","sort","b","handleCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.808c3434.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n\treturn (\r\n\t\t<Card className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`} onClick={props.onClick}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<h2 className={`infoBox__cases ${!isRed && 'infoBox__cases--green'}`}>{cases}</h2>\r\n\t\t\t\t<Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n\t\t\t\t\t{total} Total\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Popup, Circle } from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: '#CC1034',\r\n\t\trgb: 'rgb(204, 16, 52)',\r\n\t\thalf_op: 'rgba(204, 16, 52, 0.5',\r\n\t\tmultiplier: 800\r\n\t},\r\n\trecovered: {\r\n\t\thex: '#7DD71D',\r\n\t\trgb: 'rgb(125, 215, 29',\r\n\t\thalf_op: 'rgba(125, 215, 29, 0.5',\r\n\t\tmultiplier: 1200\r\n\t},\r\n\tdeaths: {\r\n\t\thex: '#fb4443',\r\n\t\trgb: 'rgb(251, 68, 67, 0.5',\r\n\t\thalf_op: 'rgba(251, 68, 67, 0.5',\r\n\t\tmultiplier: 2000\r\n\t}\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [ ...data ];\r\n\r\n\treturn sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const buildChartData = (data, casesType) => {\r\n\tconst chartData = [];\r\n\tlet lastDataPoint;\r\n\r\n\tfor (let date in data.cases) {\r\n\t\tif (lastDataPoint) {\r\n\t\t\tconst newDataPoint = {\r\n\t\t\t\tx: date,\r\n\t\t\t\ty: data[casesType][date] - lastDataPoint\r\n\t\t\t};\r\n\t\t\tchartData.push(newDataPoint);\r\n\t\t}\r\n\t\tlastDataPoint = data[casesType][date];\r\n\t}\r\n\treturn chartData;\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n\tdata.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[ country.countryInfo.lat, country.countryInfo.long ]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className=\"info-container\">\r\n\t\t\t\t\t<div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n\t\t\t\t\t<div className=\"info-name\">{country.country}</div>\r\n\t\t\t\t\t<div className=\"info-confirmed\">Cases: {numeral(country.cases).format('0,0')}</div>\r\n\t\t\t\t\t<div className=\"info-recovered\">Recovered: {numeral(country.recovered).format('0,0')}</div>\r\n\t\t\t\t\t<div className=\"info-deaths\">Deaths: {numeral(country.deaths).format('0,0')}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n\r\nexport const prettyPrintStat = (stat) => stat && `+${numeral(stat).format('0.0a')}`;\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport './Map.css';\r\nimport { showDataOnMap } from '../../util';\r\nconst Map = ({ countries, casesType, center, zoom }) => {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t<LeafletMap center={center} zoom={zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution=\"&copy; <a href='http://osm.org/copyright'>OpenStreetMap</a> contributors\"\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(countries, casesType)}\r\n\t\t\t</LeafletMap>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nconst Table = ({ countries }) => {\r\n\treturn (\r\n\t\t<div className=\"table\">\r\n\t\t\t{countries.map(({ country, cases, index }) => (\r\n\t\t\t\t<tr key={`${country}${cases}`}>\r\n\t\t\t\t\t<td key={`${country}`}>{country}</td>\r\n\t\t\t\t\t<td key={`${cases}`}>\r\n\t\t\t\t\t\t<strong>{numeral(cases).format('0.0a')}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { buildChartData } from '../../util';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n\tlegend: {\r\n\t\tdisplay: false\r\n\t},\r\n\telements: {\r\n\t\tpoint: {\r\n\t\t\tradius: 0\r\n\t\t}\r\n\t},\r\n\tmantainAspectRatio: false,\r\n\ttooltips: {\r\n\t\tmode: 'index',\r\n\t\tintersect: false,\r\n\t\tcallbacks: {\r\n\t\t\tlabel: function(tooltipItem, data) {\r\n\t\t\t\treturn numeral(tooltipItem.value).format('+0,0');\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\tscales: {\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\ttype: 'time',\r\n\t\t\t\ttime: {\r\n\t\t\t\t\tformat: 'MM/DD/YY',\r\n\t\t\t\t\ttooltipFormat: 'll'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t],\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false\r\n\t\t\t\t},\r\n\t\t\t\tticks: {\r\n\t\t\t\t\tcallback: function(value, index, values) {\r\n\t\t\t\t\t\treturn numeral(value).format('0a');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n};\r\nconst LineGraph = ({ casesType }) => {\r\n\t// https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n\r\n\tconst [ data, setData ] = useState({});\r\n\r\n\tuseEffect(() => {\r\n\t\t(async () => {\r\n\t\t\tconst response = await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120');\r\n\t\t\tconst json = await response.json();\r\n\r\n\t\t\tconst chartData = buildChartData(json, casesType);\r\n\t\t\tsetData(chartData);\r\n\t\t})();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n        <div className=\"linegraph\">\r\n        {data?.length > 0 && \r\n            <Line\r\n\t\t\t\tdata={{\r\n\t\t\t\t\tdatasets: [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdata: data,\r\n\t\t\t\t\t\t\tbackgroundColor: 'rgba(204, 16, 52, 0.5',\r\n\t\t\t\t\t\t\tborderColor: '#CC1034'\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}}\r\n\t\t\t\toptions={options}\r\n\t\t\t/>\r\n        }\r\n\t\t</div>\t\r\n\t);\r\n};\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport './App.css';\n\nimport InfoBox from './components/InfoBox/InfoBox.jsx';\nimport Map from './components/Map/Map.jsx';\nimport Table from './components/Table/Table.jsx';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './components/LineGraph/LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\tconst [ countries, setCountries ] = useState([]);\n\tconst [ country, setCountry ] = useState('worlwide');\n\tconst [ countryInfo, setCountryInfo ] = useState('');\n\tconst [ tableData, setTableData ] = useState([]);\n\tconst [ mapCenter, setMapCenter ] = useState({ lat: 34.80746, lng: -40.4796 });\n\tconst [ mapZoom, setMapZoom ] = useState(2);\n\tconst [ mapCountries, setMapCountries ] = useState([]);\n\tconst [ casesType, setCasesType ] = useState('cases');\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconst response = await fetch('https://disease.sh/v3/covid-19/all');\n\t\t\tconst json = await response.json();\n\t\t\tsetCountryInfo(json);\n\t\t})();\n\t}, []);\n\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconst response = await fetch(`https://disease.sh/v3/covid-19/countries`);\n\t\t\tconst json = await response.json();\n\n\t\t\tconst countries = json.map((country) => ({\n\t\t\t\tname: country.country,\n\t\t\t\tvalue: country.countryInfo.iso2\n\t\t\t}));\n\n\t\t\tconst sortedData = sortData(json);\n\n\t\t\tsetTableData(sortedData);\n\t\t\tsetCountries(countries);\n\t\t\tsetMapCountries(json);\n\t\t})();\n\t}, []);\n\n\tconst handleCountryChange = async (e) => {\n\t\tconst countryCode = e.target.value;\n\n\t\tconst url =\n\t\t\tcountryCode === 'worldwide'\n\t\t\t\t? `https://disease.sh/v3/covid-19/all`\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\t\tconst response = await fetch(url);\n\t\tconst json = await response.json();\n\n\t\tsetCountry(countryCode);\n\t\tsetCountryInfo(json);\n\n\t\tsetMapCenter([ json.countryInfo.lat, json.countryInfo.long ]);\n\t\tsetMapZoom(6);\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>COVID-19 TRACKER</h1>\n\t\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t\t<Select variant=\"outlined\" value={country} onChange={handleCountryChange}>\n\t\t\t\t\t\t\t<MenuItem key=\"default\" value=\"worlwide\">\n\t\t\t\t\t\t\t\tWorldwide\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country, index) => (\n\t\t\t\t\t\t\t\t<MenuItem key={index} value={country.value}>\n\t\t\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === 'cases'}\n\t\t\t\t\t\tonClick={() => setCasesType('cases')}\n\t\t\t\t\t\ttitle={'Corona Virus Cases'}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)}\n\t\t\t\t\t\tkey={'infoB1'}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tactive={casesType === 'recovered'}\n\t\t\t\t\t\tonClick={() => setCasesType('recovered')}\n\t\t\t\t\t\ttitle={'Recovered'}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)}\n\t\t\t\t\t\tkey={'infoB2'}\n\t\t\t\t\t/>\n\t\t\t\t\t<InfoBox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === 'deaths'}\n\t\t\t\t\t\tonClick={() => setCasesType('deaths')}\n\t\t\t\t\t\ttitle={'Deaths'}\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t\tkey={'infoB3'}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\t\t\t</div>\n\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3>Worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph casesType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}